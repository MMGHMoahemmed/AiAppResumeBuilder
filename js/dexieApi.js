// --- START OF FILE dexieApi.js ---

const db = new Dexie('AiResumeBuilderDB');

// Define the database schema - KEEP Version 1
db.version(1).stores({
  settings: '&key', // Keep settings
  // Keep the original indexing - NOT indexing applicationName
  applications: '++id, createdAt, updatedAt'
});

// --- Settings Helpers (Keep as before) ---
// Settings
async function saveSetting(key, value) {
  try {
    await db.settings.put({ key: key, value: value });
    console.log(`Setting '${key}' saved.`);
    return true;
  } catch (error) {
    console.error(`Error saving setting '${key}':`, error);
    return false;
  }
}

async function getSetting(key) {
    
  try {
    const setting = await db.settings.get(key);
    return setting ? setting.value : undefined;
  } catch (error) {
    console.error(`Error getting setting '${key}':`, error);
    return undefined;
  }
}


// --- Application Helper Functions ---

/**
 * Saves or updates an entire application object.
 * @param {object} applicationData - The complete application object (should use applicationName internally).
 * @param {number|null} applicationId - The ID to update, or null to add.
 * @returns {Promise<number|null>} The ID of the saved/updated application or null on error.
 */
async function saveApplication(applicationData, applicationId = null) {
    const now = new Date();
    const dataToSave = {
        ...applicationData,
        updatedAt: now,
    };

    // Ensure default nested structures exist
    dataToSave.resumeData = dataToSave.resumeData || {};
    dataToSave.coverLetterData = dataToSave.coverLetterData || {};
    dataToSave.aiTrainerData = dataToSave.aiTrainerData || {};

    // --- Ensure applicationName property exists ---
    //if (!dataToSave.applicationName) {
      //   dataToSave.applicationName = `Untitled Application ${now.toLocaleString()}`;
         // Sync to resumeData.personalInfo.name if creating untitled
        // if (!dataToSave.resumeData.personalInfo) dataToSave.resumeData.personalInfo = {};
         //dataToSave.resumeData.personalInfo.name = dataToSave.applicationName;
   // }
    // --- End Ensure ---

    try {
        if (applicationId) {
            // Update existing application
            dataToSave.id = applicationId; // Ensure ID is set for put
            await db.applications.put(dataToSave);
            console.log(`Application ID ${applicationId} updated.`);
            return applicationId;
        } else {
            // Add new application
            dataToSave.createdAt = dataToSave.createdAt || now; // Use existing or set new
            // ID is auto-generated by Dexie since it's '++id'
            const newId = await db.applications.add(dataToSave);
            console.log(`New application saved with ID: ${newId}`);
            return newId;
        }
    } catch (error) {
        console.error("Error saving application:", error);
        return null;
    }
}

// --- getApplication (No change needed) ---
async function getApplication(id) {
    if (!id) return null;
    try {
        const application = await db.applications.get(parseInt(id));
        // console.log(`Retrieved application ID ${id}:`, application); // Optional: reduce logging
        if (application) {
            application.resumeData = application.resumeData || {};
            application.coverLetterData = application.coverLetterData || {};
            application.aiTrainerData = application.aiTrainerData || {};
        }
        return application;
    } catch (error) {
        console.error(`Error getting application ID ${id}:`, error);
        return null;
    }
}

// --- getAllApplications (No change needed) ---
async function getAllApplications() {
    try {
        // Sorting still works on updatedAt index
        const applications = await db.applications.orderBy('updatedAt').reverse().toArray();
        // console.log("Retrieved all applications:", applications); // Optional: reduce logging
        return applications;
    } catch (error) {
        console.error("Error getting all applications:", error);
        return [];
    }
}


// --- deleteApplication (No change needed) ---
async function deleteApplication(id) {
    // ... (implementation remains the same) ...
    if (!id) return false;
    try {
        await db.applications.delete(parseInt(id));
        console.log(`Application ID ${id} deleted.`);
        return true;
    } catch (error) {
        console.error(`Error deleting application ID ${id}:`, error);
        return false;
    }
}


/**
 * Duplicates an application object.
 * @param {number} id - The ID of the application to duplicate.
 * @returns {Promise<number|null>} The ID of the new duplicated application or null on error.
 */
async function duplicateApplication(id) {
    if (!id) return null;
    try {
        const originalApp = await getApplication(id);
        if (!originalApp) return null;

        const newAppData = JSON.parse(JSON.stringify(originalApp));
        delete newAppData.id; // Remove original ID

        // --- UPDATE: Use applicationName ---
        newAppData.applicationName = `Copy of ${originalApp.applicationName || 'Untitled Application'}`;
        // --- END UPDATE ---
        const now = new Date();
        newAppData.createdAt = now;
        newAppData.updatedAt = now;

        // Ensure resume name is also updated if syncing
        if (newAppData.resumeData?.personalInfo) {
            newAppData.resumeData.personalInfo.name = newAppData.applicationName;
        }

        const newId = await saveApplication(newAppData); // saveApplication handles adding with new ID
        console.log(`Duplicated application ID ${id} into new ID ${newId}`);
        return newId;
    } catch (error) {
        console.error(`Error duplicating application ID ${id}:`, error);
        return null;
    }
}

// --- END OF FILE dexieApi.js ---